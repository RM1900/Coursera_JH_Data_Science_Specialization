corr("specdata")
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
results <- data.frame()
for (i in 1:length(files_list)) {
dat <- read.csv(files_list[i])
if (sum(complete.cases(dat)) > threshold) {
results <- rbind(results, cor(dat$nitrate,dat$sulfate, use = "complete.obs"))
}
}
return(results)
}
corr("specdata")
summary(results)
corr("specdata",150)
corr("specdata",400)
head(reslts)
cr <- corr("specdata",400)
head(cr)
summary(cr)
cr <- corr("specdata",150)
head(Cr)
head(cr)
summary(cr)
submit()
results
as.vector(results)
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
results <- data.frame()
for (i in 1:length(files_list)) {
dat <- read.csv(files_list[i])
if (sum(complete.cases(dat)) > threshold) {
results <- rbind(results, cor(dat$nitrate,dat$sulfate, use = "complete.obs"))
}
}
return(as.vector(results))
}
cr <- corr("specdata",150)
summary(cr)
cr
submit()
?as.vector
x <- as.vector(cr)
x
class(x)
class(cr)
x <- as.vector(cr[,1])
class(x)
x
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
results <- data.frame()
for (i in 1:length(files_list)) {
dat <- read.csv(files_list[i])
if (sum(complete.cases(dat)) > threshold) {
results <- rbind(results, cor(dat$nitrate,dat$sulfate, use = "complete.obs"))
}
}
return(as.vector(results[,1]))
}
submit()
submit()
submit()
cr <- corr("specdata",5000)
?return
result <- data.frame()
as.vector(results[,1])
as.vector(result[,1])
return(as.vector(results[,1]))
summary(results)
summary(result)
length(result)
?data
?data.vector
?data.frame
?vector
x <- vector()
class(x)
x <- numeric()
class(x)
?numeric
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
results <- data.frame()
for (i in 1:length(files_list)) {
dat <- read.csv(files_list[i])
if (sum(complete.cases(dat)) > threshold) {
results <- rbind(results, cor(dat$nitrate,dat$sulfate, use = "complete.obs"))
}
}
if (length(result) ==0) {
return(x <- numeric())
}
else {
return(as.vector(results[,1]))
}
}
cr <- corr("covedata",5000)
cr <- corr("covdata",5000)
cr <- corr("specdata",5000)
submit()
length(x)
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
results <- data.frame()
for (i in 1:length(files_list)) {
dat <- read.csv(files_list[i])
if (sum(complete.cases(dat)) > threshold) {
results <- rbind(results, cor(dat$nitrate,dat$sulfate, use = "complete.obs"))
}
}
if (length(result) ==0) {
return(numeric())
}
else {
return(as.vector(results[,1]))
}
}
cr <- corr("specdata",5000)
cr
submit()
summary(cr)
cr
length(cr)
cr <- corr("specdat",150)
cr <- corr("specdata",150)
cr
length(result)
?empty
?isnull
?null
count = 0
count = count + 1
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
results <- data.frame()
count = 0
for (i in 1:length(files_list)) {
dat <- read.csv(files_list[i])
if (sum(complete.cases(dat)) > threshold) {
results <- rbind(results, cor(dat$nitrate,dat$sulfate, use = "complete.obs"))
count = count +1
}
}
if (count == 0) {
return(numeric())
}
else {
return(as.vector(results[,1]))
}
}
cr <- corr("specdata",5000)
cr
sumbit
sumbit()
submit()
?assign
?solve
?matrix
m <- matrix(c(1:10),nrow=5)
m
solve(m)
m <- matrix(c(1:25),nrow=5,ncol=5)
m
solve(m)
m <- matrix(c(1,0,2,1,3,1,4,5,2,3),nrow=3,ncol=3)
m <- matrix(c(1,0,2,1,3,1,4,5,2),nrow=3,ncol=3)
m
solve(m)
?exists
?is.null
?exists
makeCacheMatrix <- function(x = matrix()) {
if (exists(xInvers, envir=myCachedEnv)){
return(get(xInvers, envir=myCachedEnv))
}
else {
assign(xInvers, solve(x), envir=myCachedEnv)
return(xInvers)
}
}
myCachedEnv <- new.env()
z <- makeCacheMatrix(m)
url <- "test url"
file <- "test file"
assign(url, file, envir=myCachedEnv)
get(url, envir=myCachedEnv)
makeCacheMatrix <- function(x = matrix()) {
if (!exists(xInvers, envir=myCachedEnv)){
assign(xInvers, solve(x), envir=myCachedEnv)
}
return(get(xInvers, envir=myCachedEnv))
}
makeCacheMatrix(m)
!exists(xInvers, envir=myCachedEnv)
myCahcedEnv
myCachedEnv
ls(myCachedEnv)
myCachedEnv$xInverse <- matrix()
ls(myCachedEnv)
exists(xInvers, envir=myCachedEnv)
exists(xInverse, envir=myCachedEnv)
exists(myCachedEnv$xInverse)
is.null(myCachedEnv$xInverse)
?inverse
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(solve) inverse <<- solve
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
inverse
}
m <- matrix(c(1,0,2,0,1,2,3,4,2),nrow=3,ncol=3)
solve(m)
cacheSolve(m)
x$getInverse()
getInverse
getInverse()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- c(1,2,3,4,5,6)
class(test)
cachemean(test)
mean(test)
?new_cache
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverseX <- NULL
set <- function(y) {
x <<- y
inverseX <<- NULL
}
get <- function() x
setInverse <- function(solve) inverseX <<- solve
getInverse <- function() inverseX
list(
set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
inverse
}
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
a
cacheSolve(a)
parent(a)
parent(CacheSolve)
?parent
?parent_env
?env
## By using these two functions you can solve for the inverse of a square
## and invertible matrix and then cache the solution which will speed up
## performance when you would otherwise have to solve for the inverse
## multiple times
## for example:
## test <- makeCacheMatrix()
## test$set(matrix(1:4,2,2))
## cacheSolve(test)
##      [,1] [,2]
## [1,]   -2  1.5
## [2,]    1 -0.5
## makeCacheMatrix creates a matrix which is really a list containing functions
## to
## 1.  set the matrix
## 2.  get the matrix
## 3.  solve and cache the value of the inverse of the matrix
## 4.  get the cached value of the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inverseX <- NULL #on initialization set the cached inverse to NULL
set <- function(y) { #set the matrix
x <<- y
inverseX <<- NULL
}
get <- function() x # get the matrix
setInverse <- function(solve) inverseX <<- solve #solve for the inverse of
# 'x' and cache it
getInverse <- function() inverseX #function to return the cached inverse
list( #expose internal functions
set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve checks to see if the inverse of the matrix 'x' is available in the
## cache and if it is, return it.  Otherwise solve for the inverse of 'x' and
## save it in the cache and return the solution
cacheSolve <- function(x, ...) {
inverse <- x$getInverse() #get the cached inverse of 'x' which could be null
if(!is.null(inverse)) { #if null, then the inverse has not been cached
message("getting cached data")
return(inverse) #return the cached solution
}
data <- x$get() #the inverse has not been cached so solve(x) and cache it
inverse <- solve(data, ...) #solve for the inverse
x$setInverse(inverse) #set the cache to the inverse
inverse #return the inverse
}
test <- makeCacheMatrix()
test$set(matrix(1:4,2,2))
cacheSolve(test)
library(datasets)
data(iris)
?iris
summary(iris)
?which
x <- iris[which(iris["Species"]=="virginica")
x <- iris[which(iris["Species"]=="virginica")]
x <- iris[which(iris[,"Species"]=="virginica")]
name(iris)
names(iris)
head(iris)
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(datasets)
data(iris)
str(iris)
swirl()
dim(flags)
viewinfo()
class(flags)
cls_list <-lapply(flags,class)
cls_list
class(cls)list
class(cls_list)
as.character(cls_list
)
cls_list <-sapply(flags,class)
cls_vect <-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <-lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique)vals,function(elem) elem[2]
lapply(unique)vals,function(elem) elem[2])
lapply(unique_vals,function(elem) elem[2])
swirl()
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vectr
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly",Sean"")
patients <- c("Bill","Gina","Kelly",Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbing(patients,my_matrix)
cbind(patients,my_matrix)
my_data <-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
summary(flags)
sapply(flags,unique)
apply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
talbe(flags$animate)
table(flags$animate)
tapply(flags$animate,flags$landsmass,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$populate,flags$red,summar)
tapply(flags$population,flags$red,summar)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,mean)
tapply(flags$population,flags$landmass,summary)
summary(iris)
class(iris)
tapply(iris$Sepal.Length,iris$Species,summary)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
?apply
dat(mtcars)
library(datasets)
data(mtcars)
summary(mtcars)
head(mtcars)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
debug(ls)
ls()
q
quit
quit(sae)
search()
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429 - 82.63636
set.seed(1)
rpois(5, 2)
?rpois
?rpois()
?
rpois
exit
quit
