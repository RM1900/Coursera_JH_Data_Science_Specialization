datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(character(), Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(i, Hospital = answer[1], State = i))
#        print(output)
}
outout[order(outout[,1])]
names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(character(), Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(i, Hospital = answer[1], State = i))
#        print(output)
}
# output[order(output[,1])]
names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
View(test)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(character(), Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(i, Hospital = answer[1], State = i))
#        print(output)
}
output[order(output[,1]),]
names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
View(test)
View(test)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(character(), Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(i, Hospital = answer[1], State = i))
if(i=="WI") print(output)
}
names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
View(test)
View(test)
names(test)[1] <- I
names(test)[1] <- "I"
View(test)
test <- test[order(test[,1]),]
View(test)
test <- test[order(test[,I]),]
test <- test[order(test$I),]
View(test)
View(test)
test[order(test$I)]
test[order(test$I),]
test2 <-test[order(test$I),]
View(test2)
test2 <-test[order(test$State),]
View(test2)
test2 <-test[sort(test$State),]
View(test2)
class(test)
class(test2)
str(test)
head(test)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(character(), Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(i, Hospital = answer[1], State = i))
}
#  output <- output[order(output[,1]),]
names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
View(test)
test$I
test$State
test2 <- test[order(($State)),]
test2 <- test[order((State)),]
test2 <- test[order((test$State)),]
View(test2)
View(test)
View(test2)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(character(), Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(i, Hospital = answer[1], State = i))
print(output)
}
print(output)
#  output <- output[order(output[,1]),]
names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
test2 <-test[,sort(test$State)]
test2 <-test[,order(test$State)]
test2 <-test[order(test$State)]
test2 <-test[order(test$State),]
View(test2)
ndx = order(Test$State)
ndx = order(test$State)
View(test)
ndx2 = rank(test$State)
test$State
test2 <- test[with(test,order(State)),]
View(test2)
str(test)
test[order(State),]
test[order($State),]
test[order(test$State),]
libary(gtools)
library(gtools)
load(gtools)
load(http://cran.r-project.org/web/packages/gtools)
source("http://cran.r-project.org/web/packages/gtools")
install.packages("gtools")
?mixedsort
mixedsort
library(gtools)
?mixedsort
test2 <- test[mixedsort(test$State),]
View(test2)
View(test2)
test2
test[1]
classes(test)
class(test)
summary(test)
test[orderby(test$State)]
test[order(test$State)]
test[order(test$State),]
test[order(test[1],test[2]),]
rankall <- function(outcome, num="best") {
library(gtools)
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(character(), Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(i, Hospital = answer[1], State = i))
print(output)
}
print(output)
output <- output[order(output[1],output[2]),]
names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
head(test,20)
head(test,10)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
test <- rankall("heart attack", 20)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(Hospital = answer[1], State = i))
print(output)
}
output <- output[order(output[1],output[2]),]
#    names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(Hospital = answer[1], State = i))
}
output <- output[order(output[1],output[2]),]
#    names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
View(test)
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(Hospital = character(), State = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(Hospital = answer[1], State = i))
}
output <- output[order(output[2],output[1]),]
#    names(output)[1] <- ""
return(output)
}
test <- rankall("heart attack", 20)
View(test)
head(test,5)
submit()
rankall <- function(outcome, num="best") {
list_Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!is.element(outcome, list_Outcomes)) stop("invalid outcome")
if(!is.numeric(num) && num != "best" && num != "worst") stop("invalid ranking")
datafile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
lookup <- function(sub_data) {
if (num == "best") return (sub_data[1,2])
else if (num == "worst") return (tail(sub_data[,2],1))
else if(num > nrow(sub_data)) return(NA)
else return(sub_data[num,2])
}
options( warn = -1 )
if (outcome == "heart attack") {
sorteddata <- datafile[order(as.numeric(datafile[,11]), datafile[,2], na.last=NA), ]
}
else if (outcome == "heart failure") {
sortedata <- datafile[order(as.numeric(datafile[,17]), datafile[,2], na.last=NA), ]
}
else {
sorteddata <- datafile[order(as.numeric(datafile[,23]), datafile[,2], na.last=NA), ]
}
options( warn = 0 )
splitdata <- split(sorteddata, sorteddata[,7])
output <- data.frame(hospital = character(), state = character())
for (i in state.abb) {
statedata <- splitdata[[i]]
#        print(i)
answer <-lookup(statedata)
#        print(answer)
output <- rbind(output,data.frame(hospital = answer[1], state = i))
}
output <- output[order(output[2],output[1]),]
#    names(output)[1] <- ""
return(output)
}
submit()
submit()
submit()
submit()
?>inv
?inv
?environment
parent.env(test)
env(test)
environment(test)
environment(test2)
environment(rankall)
makeCacheMatrix <- function(x = matrix()) {
inverseX <- NULL #on initialization set the cached inverse to NULL
set <- function(y) { #set the matrix
x <<- y
inverseX <<- NULL
}
get <- function() x # get the matrix
setInverse <- function(solve) inverseX <<- solve #solve for the inverse of
# 'x' and cache it
getInverse <- function() inverseX #function to return the cached inverse
list( #expose internal functions
set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
environment(makeCacheMatrix)
