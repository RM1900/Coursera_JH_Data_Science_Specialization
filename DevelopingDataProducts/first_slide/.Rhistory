install.packages("swirl", dependencies = T)
install.packages("swirl", dependencies = T)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
.64
.64
mypdf
?mypdf
mypdf(1.6)
integrate(mypdf,0,1.6)
integrate(mypdf,0,2)/2
integrate(mypdf,0,2)
.5
sqrt(2)
=99.7*.001
99.7*.001
.997*.001
.999*.015
.997*.001/(.999*.015 +.997*.001)
21/36
21/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- dice_sqr*dice_fair
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair-3.5^2
sum(dice_sqr*dice_high)-3.5^2
sum(dice_sqr*dice_high)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(samole(0:1,10000,T),1000),1,mean))
sd(apply(matrix(sample(0:1,10000,T),1000),1,mean))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
.8^6
for (i in 3:5){choose(5,i)*(.8)^i*(.2)^(5-i)}
a<-for (i in 3:5){choose(5,i)*(.8)^i*(.2)^(5-i)}
a
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2,5,.8,lower.tail = =F)
pbinom(2,5,.8,lower.tail =F)
pbinom(2,size=5,prob=.8,lower.tail =F)
pbinom(2,size=5,prob=.8,lower.tail =FALSE)
?qnorm
swirl()
library(swirl)
swirl()
qnorm(.1)
0
?qnorm
qnorm(.975 mean=3, sd = 2)
qnorm(.975, mean=3, sd = 2)
qnorm(.975, mean=3, sd = 2)*2+3
1.96*2+3
pnorm(1200,mean=1020,sd=50)
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
1200-1020/50
pnrom(1200-1020/50,lower.tail=false)
pnorm(1200-1020/50,lower.tail=false)
pnorm(1200-1020/50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
pnorm(.75,mean=1020,sd=50,lower.tail=TRUE)
qnorm(.75,mean=1020,sd=50)
pnorm(qnorm(.53))
qnorm(pnorm(.53))
?ppois
ppois(3,mean=2.5*4,lower.tail=F, log.p=F)
ppois(3,lambda =2.5*4,lower.tail=F, log.p=F)
pppois(3,2.5*4)
ppois(3,2.5*4)
?pbinom
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 + c(-1,1) * qnorm(.975)*sqrt(.6(.4)/100)
.6 + c(-1,1) + qnorm(.975)*sqrt(.6(.4)/100)
.6 + qnorm(.975)*sqrt(.6(.4)/100)
qnorm(.975)*sqrt(.6(.4)/100)
qnorm(.975)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar
ACCompar(20)
lamb=5/94.32
lamb<-5/94.32
lamb+c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
myplot
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1-g2
difference <- g2-g1
mean(differences)
mean(difference)
s <- sd(difference)
install.packages(UsingR)
q
quit
esc
?
menu
info()
bye
bye()
install.packages(UsingR)
library(UsingR)
install.packages("UsingR")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
install.packages("ggplot2")
install.packages("ggplot2")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
install.packages("reshape")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
mean(galton$child)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour\
= "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
ggplot(galton, aes(x = parent, y = child)) + geom_point()
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
runif(1)
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
install.packages("dply")
install.packages("dplyr")
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
lm(I(parent - mean(parent))~ I(child - mean(child)) - 1, data = galton)
install.packages("UsingR")
install.packages("UsingR")
library(UsingR)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
lm(x ~ y)
lm(x ~ y -1)
data(mtcars)
lm(mtcars$weight ~mtcars$mpg)
lm(mtcars$wt ~mtcars$mpg)
lm(mtcars$mpg ~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y <- (x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(y ~ x)
lm(x ~ y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(x,y) *sd(y)/sd(x)
lm(y ~ x)
x<- x-1
y <- y-1
lm(y ~ x)
<- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x<- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
b1 <- cor(x,y)*sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
b1
b0
lm(y ~ x)
lm(x ~ y)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x * w) / sum(w)
mean(x)
y <- x*w
y
mean(y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (y~)
lm (y~x)
lm (y~x+0)
lm (y~x+1)
lm (y~x-1)
?lm
swirl()
info
info()
main()
bye()
install_from_swirl("Regression_Model")
install_from_swirl("Regression_Models")
swirl()
info()
skip()
t.test(.975,df=9,n=10)$conf.int
?t.test
skip()
skip()
ns <- 27
skip()
skip()
skip()
skip()
main()
10/sqrt(100)
32-30
(32-30)/(10/sqrt(15))
(32-30)/(10/sqrt(16))
15
skip()
dim(fs)
t.test(fs$fheight-fs$sheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
mybin[9]
mybin[8]
mybin[7]
mybin[6]
6
7
8
main()
View(mtcars)
bye()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data(rCharts)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
install.packages("rCharts")
<- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d<- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d<- data.frame(airquality, stringsAsFactors = FALSE)
?rCharts
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install_github('rCharts', 'ramnathv')
install.packages('devtools')
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("Rcpp")
?rCharts
rCharts
install_github('ramnathv/rCharts')
rCharts
?rCharts
require(rCharts)
?rCharts::dataTable()
?dtable
rCharts::dTable(airquality,sPaginationType="full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2("Big text")
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
runApp()
getwd
getwd()
setwd("/Users/Merrimans/GitHub/Coursera_RegressionModels")
setwd("/Users/Merrimans/Documents/GitHub/Coursera_RegressionModels")
runApp
runApp()
runApp()
runApp()
install.packages("devtools")
install.packages("devtools")
library("devtools")
library(devtools)
install.github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github('slidifylibraries', 'ramnathv')
getwd()
author("first_deck")
author("first_deck")
install_github('slidifylibraries', 'ramnathv/slidifylibraries')
?install_github
install_github('ramnathv/slidifylibraries')
author("first_deck")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("first_deck")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
getwd()
publish_github('Coursera_DataProducts',username=getOptions("RM1900"))
publish_github('Coursera_DataProducts',username="RM1900")
publish_github('Coursera_DataProducts',username="RM1900")
?publish_github
publish(user="RM1900", repo="Coursera_DataProducts")
system('which git')
library(slidify)
author('first_slide')
system('which git')
getwd()
setwd("/Users/Merrimans/Documents/GitHub/Coursera_DataProducts")
author('first_slide')
publish(".", repo = "Coursera_DataProducts", username = "RM1900")
publish(repo = "Coursera_DataProducts", username = "RM1900")
publish(repo = "gh-pages", username = "RM1900")
?publish
publish(repo = "gh-pages", username = "RM1900", host="github")
